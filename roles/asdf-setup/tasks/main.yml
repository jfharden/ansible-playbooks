- name: Ensure home bin exists
  ansible.builtin.file:
    path: /home/eviljonny/bin
    state: directory
    mode: '0755'

- name: Check if asdf binary exists
  ansible.builtin.stat:
    path: /home/eviljonny/bin/asdf
  register: asdf_binary_stat

- name: Install asdf binary
  when: not asdf_binary_stat.stat.exists
  block:
  - name: Get asdf latest release information
    ansible.builtin.uri:
      url: https://api.github.com/repos/asdf-vm/asdf/releases/latest
      return_content: true
    register: asdf_latest_release_json

  - name: Set asdf facts
    ansible.builtin.set_fact:
      asdf_zip_name: "{{ asdf_release_json.name }}"
      asdf_zip_url: "{{ asdf_release_json.browser_download_url }}"
    vars:
      asdf_binary_arch: "{{ 'amd64' if ansible_architecture == 'x86_64' else 'arm64' if ansible_architecture == 'aarch64' else ansible_architecture }}"
      asdf_platform: "{{ ansible_system | lower }}"
      asdf_release_json: "{{ asdf_latest_release_json.json | community.general.json_query('assets[?contains(name, `' + asdf_platform + '-' + asdf_binary_arch +'`) && ends_with(name, `gz`)] | [0]') }}"

  - name: Download asdf release archive
    ansible.builtin.get_url:
      url: "{{ asdf_zip_url }}"
      dest: "/tmp/{{ asdf_zip_name }}"

  - name: Copy asdf binary into homedir
    ansible.builtin.unarchive:
      src: "/tmp/{{ asdf_zip_name }}"
      remote_src: true
      dest: /home/eviljonny/bin/

  - name: Create bashrc.d asdf integration
    ansible.builtin.copy:
      dest: /home/eviljonny/.bashrc.d/00-asdf.bashrc
      content: |
        #!/usr/bin/env bash
        export PATH="${ASDF_DATA_DIR:-$HOME/.asdf}/shims:$PATH"
        . <(asdf completion bash)
      mode: '0664'

- name: Reset connection
  meta: reset_connection

- name: Ensure .asdfrc exists
  ansible.builtin.file:
    path: /home/eviljonny/.asdfrc
    state: touch
    mode: '0664'
    access_time: preserve
    modification_time: preserve

- name: Enable legacy_version_file
  ansible.builtin.lineinfile:
    path: /home/eviljonny/.asdfrc
    regexp: '^legacy_version_file'
    line: legacy_version_file = yes

- name: Get installed plugins
  ansible.builtin.shell:
    cmd: /home/eviljonny/bin/asdf plugin list
  changed_when: False
  register: asdf_installed_plugins

- name: Add asdf plugins
  when: item not in asdf_installed_plugins.stdout_lines
  ansible.builtin.shell:
    executable: /bin/bash
    cmd: 'source /home/eviljonny/.bashrc && asdf plugin add {{ item | quote }}'
  loop: "{{ plugins_to_install }}"

- name: Ensure .tool-versions exists
  ansible.builtin.file:
    path: /home/eviljonny/.tool-versions
    state: touch
    mode: '0664'
    access_time: preserve
    modification_time: preserve

- name: Add to tool-versions file
  ansible.builtin.lineinfile:
    path: /home/eviljonny/.tool-versions
    regexp: '^{{ item.key }}'
    line: '{{ item.key }} {{ item.value }}'
  loop: "{{ tool_versions | dict2items }}"
  notify: 
    - Run asdf install

- name: Trigger asdf install when updating plugins
  when: asdf_update_plugins
  ansible.builtin.assert:
    that: true
    quiet: true
  changed_when: true
  notify:
    - Update asdf plugins
    - Run asdf install

- ansible.builtin.meta: flush_handlers

- name: Reset connection
  ansible.builtin.meta: reset_connection

- name: Run asdf install
  ansible.builtin.shell:
    executable: /bin/bash
    cmd: "source /home/eviljonny/.bashrc && asdf install"
  register: asdf_install_result
  changed_when: asdf_install_result is search("Installing")
